"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["src_components_dashboard_js"],{

/***/ "./src/components/dashboard.js":
/*!*************************************!*\
  !*** ./src/components/dashboard.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dashboard: () => (/* binding */ Dashboard)\n/* harmony export */ });\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chart.js */ \"./node_modules/chart.js/dist/chart.js\");\n/* harmony import */ var _utils_http_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/http-utils */ \"./src/utils/http-utils.js\");\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layout */ \"./src/components/layout.js\");\n        \r\n        \r\n        \r\n\r\n        chart_js__WEBPACK_IMPORTED_MODULE_0__.Chart.register(...chart_js__WEBPACK_IMPORTED_MODULE_0__.registerables);\r\n\r\n        class Dashboard {\r\n            url = '/operations';\r\n            balanceUrl = '/balance';\r\n\r\n            colors = [\r\n                \"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FF33A1\", \"#F0FF33\",\r\n                \"#33FFF5\", \"#FF8C33\", \"#B833FF\", \"#581845\", \"#338CFF\",\r\n                \"#FFC300\", \"#DAF7A6\", \"#C70039\", \"#900C3F\", \"#FFC0CB\",\r\n                \"#A52A2A\", \"#D2691E\", \"#20B2AA\", \"#FF4500\", \"#2E8B57\",\r\n                \"#6A5ACD\", \"#FFD700\", \"#ADFF2F\", \"#FF6347\", \"#00FA9A\",\r\n                \"#7B68EE\", \"#DDA0DD\", \"#F08080\", \"#33FF8C\",\r\n            ];\r\n\r\n            constructor() {\r\n                this.chartIncome = null;\r\n                this.chartExpenses = null;\r\n\r\n                const canvasIncomeElement = document.getElementById('canvas-inc');\r\n                const canvasExpensesElement = document.getElementById('canvas-exp');\r\n\r\n                if (!canvasIncomeElement || !canvasExpensesElement) {\r\n                    return;\r\n                }\r\n\r\n                this.canvasIncomeElement = canvasIncomeElement;\r\n                this.canvasExpensesElement = canvasExpensesElement;\r\n\r\n                this.canvasIncome = canvasIncomeElement.getContext('2d');\r\n                this.canvasExpenses = canvasExpensesElement.getContext('2d');\r\n\r\n                this.initEventListeners();\r\n\r\n                this.getOperations('all').then();\r\n                this.updateBalance();\r\n\r\n            }\r\n\r\n\r\n            initEventListeners() {\r\n                const todayBtn = document.getElementById('button-today');\r\n                const weekBtn = document.getElementById('button-week');\r\n                const monthBtn = document.getElementById('button-month');\r\n                const yearBtn = document.getElementById('button-year');\r\n                const allBtn = document.getElementById('button-all');\r\n                const intervalBtn = document.getElementById('button-interval');\r\n                const startDateLink = document.getElementById('startDateLink');\r\n                const endDateLink = document.getElementById('endDateLink');\r\n\r\n                if (todayBtn) {\r\n                    todayBtn.addEventListener('click', () => {\r\n                        this.setActiveButton(todayBtn);\r\n                        this.getOperations('today');\r\n                    });\r\n                }\r\n\r\n                if (weekBtn) {\r\n                    weekBtn.addEventListener('click', () => {\r\n                        this.setActiveButton(weekBtn);\r\n                        this.getOperations('week');\r\n                    });\r\n                }\r\n\r\n                if (monthBtn) {\r\n                    monthBtn.addEventListener('click', () => {\r\n                        this.setActiveButton(monthBtn);\r\n                        this.getOperations('month');\r\n                    });\r\n                }\r\n\r\n                if (yearBtn) {\r\n                    yearBtn.addEventListener('click', () => {\r\n                        this.setActiveButton(yearBtn);\r\n                        this.getOperations('year');\r\n                    });\r\n                }\r\n\r\n                if (allBtn) {\r\n                    allBtn.addEventListener('click', () => {\r\n                        this.setActiveButton(allBtn);\r\n                        this.getOperations('all');\r\n                    });\r\n                }\r\n\r\n                if (intervalBtn) {\r\n                    intervalBtn.addEventListener('click', () => {\r\n                        this.setActiveButton(intervalBtn);\r\n                        this.selectDateRange();\r\n                    });\r\n                }\r\n\r\n                if (startDateLink) {\r\n                    startDateLink.addEventListener('click', (e) => {\r\n                        e.preventDefault();\r\n                        this.selectStartDate();\r\n                    });\r\n                }\r\n\r\n                if (endDateLink) {\r\n                    endDateLink.addEventListener('click', (e) => {\r\n                        e.preventDefault();\r\n                        this.selectEndDate();\r\n                    });\r\n                }\r\n\r\n                this.setActiveButton(allBtn);\r\n            }\r\n\r\n            async updateBalance() {\r\n                try {\r\n                    const result = await _utils_http_utils__WEBPACK_IMPORTED_MODULE_1__.HttpUtils.request(this.balanceUrl);\r\n\r\n                    if (result.error) {\r\n                        return;\r\n                    }\r\n\r\n                    if (result.response && result.response.balance !== undefined) {\r\n                        const balanceElement = document.getElementById('balance-amount');\r\n                        if (balanceElement) {\r\n                            balanceElement.textContent = result.response.balance + '$';\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Balance update error:', error);\r\n                }\r\n            }\r\n\r\n            setActiveButton(activeButton) {\r\n                const buttons = document.querySelectorAll('.btn-outline-secondary');\r\n                buttons.forEach(btn => {\r\n                    btn.classList.remove('active');\r\n                });\r\n                if (activeButton) {\r\n                    activeButton.classList.add('active');\r\n                }\r\n            }\r\n\r\n            selectDateRange() {\r\n                const startDate = prompt(\"Выберите дату начала (YYYY-MM-DD):\");\r\n                if (!startDate) {\r\n                    return;\r\n                }\r\n\r\n                const endDate = prompt(\"Выберите дату окончания (YYYY-MM-DD):\");\r\n                if (!endDate) {\r\n                    return;\r\n                }\r\n\r\n                document.getElementById('startDateLink').textContent = startDate;\r\n                document.getElementById('endDateLink').textContent = endDate;\r\n\r\n                this.startDate = startDate;\r\n                this.endDate = endDate;\r\n\r\n                this.getOperations('interval', this.startDate, this.endDate);\r\n            }\r\n\r\n            selectStartDate() {\r\n                const selectedDate = prompt(\"Выберите дату начала (YYYY-MM-DD):\");\r\n                if (selectedDate) {\r\n                    document.getElementById('startDateLink').textContent = selectedDate;\r\n                    this.startDate = selectedDate;\r\n                }\r\n            }\r\n\r\n            selectEndDate() {\r\n                const selectedDate = prompt(\"Выберите дату окончания (YYYY-MM-DD):\");\r\n                if (selectedDate) {\r\n                    document.getElementById('endDateLink').textContent = selectedDate;\r\n                    this.endDate = selectedDate;\r\n                }\r\n            }\r\n\r\n            isValidDate(dateString) {\r\n                const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n                if (!regex.test(dateString)) return false;\r\n\r\n                const date = new Date(dateString);\r\n                return date instanceof Date && !isNaN(date);\r\n            }\r\n\r\n            createData(operations = null) {\r\n                if (!operations || operations.length === 0) {\r\n                    this.showEmptyCharts();\r\n                    return;\r\n                }\r\n\r\n                const expenses = operations.filter(item => item.type === 'expense');\r\n                const incomes = operations.filter(item => item.type === 'income');\r\n\r\n                const aggregatedExpenses = this.aggregateByCategory(expenses);\r\n                const aggregatedIncomes = this.aggregateByCategory(incomes);\r\n\r\n                this.updateCharts(aggregatedIncomes, aggregatedExpenses);\r\n            }\r\n\r\n            showEmptyCharts() {\r\n                this.destroyCharts();\r\n\r\n                const emptyData = {\r\n                    labels: ['Нет данных'],\r\n                    datasets: [{\r\n                        data: [1],\r\n                        backgroundColor: ['#e9ecef'],\r\n                        borderColor: ['#dee2e6'],\r\n                        borderWidth: 1\r\n                    }]\r\n                };\r\n\r\n                const emptyConfig = this.getConfig(emptyData, 'Нет данных');\r\n                emptyConfig.options.plugins.tooltip = {\r\n                    callbacks: {\r\n                        label: function(context) {\r\n                            return 'Нет данных для отображения';\r\n                        }\r\n                    }\r\n                };\r\n\r\n                if (this.isCanvasAvailable(this.canvasIncomeElement)) {\r\n                    this.chartIncome = new chart_js__WEBPACK_IMPORTED_MODULE_0__.Chart(this.canvasIncome, emptyConfig);\r\n                }\r\n\r\n                if (this.isCanvasAvailable(this.canvasExpensesElement)) {\r\n                    this.chartExpenses = new chart_js__WEBPACK_IMPORTED_MODULE_0__.Chart(this.canvasExpenses, emptyConfig);\r\n                }\r\n            }\r\n\r\n            isCanvasAvailable(canvasElement) {\r\n                if (!canvasElement) return false;\r\n\r\n                const existingChart = chart_js__WEBPACK_IMPORTED_MODULE_0__.Chart.getChart(canvasElement);\r\n                if (existingChart) {\r\n                    existingChart.destroy();\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            destroyCharts() {\r\n                if (this.canvasIncomeElement) {\r\n                    const existingIncomeChart = chart_js__WEBPACK_IMPORTED_MODULE_0__.Chart.getChart(this.canvasIncomeElement);\r\n                    if (existingIncomeChart) {\r\n                        existingIncomeChart.destroy();\r\n                    }\r\n                }\r\n\r\n                if (this.canvasExpensesElement) {\r\n                    const existingExpenseChart = chart_js__WEBPACK_IMPORTED_MODULE_0__.Chart.getChart(this.canvasExpensesElement);\r\n                    if (existingExpenseChart) {\r\n                        existingExpenseChart.destroy();\r\n                    }\r\n                }\r\n\r\n                if (this.chartIncome) {\r\n                    this.chartIncome.destroy();\r\n                    this.chartIncome = null;\r\n                }\r\n\r\n                if (this.chartExpenses) {\r\n                    this.chartExpenses.destroy();\r\n                    this.chartExpenses = null;\r\n                }\r\n            }\r\n\r\n            aggregateByCategory(items) {\r\n                if (!items || items.length === 0) {\r\n                    return {};\r\n                }\r\n\r\n                return items.reduce((accumulator, current) => {\r\n                    const category = current.category;\r\n                    const amount = current.amount;\r\n\r\n                    if (!accumulator[category]) {\r\n                        accumulator[category] = { category: category, total: 0 };\r\n                    }\r\n\r\n                    accumulator[category].total += amount;\r\n                    return accumulator;\r\n                }, {});\r\n            }\r\n\r\n            updateCharts(aggregatedIncomes, aggregatedExpenses) {\r\n                this.destroyCharts();\r\n\r\n                const incomeLabels = Object.keys(aggregatedIncomes);\r\n                const expenseLabels = Object.keys(aggregatedExpenses);\r\n\r\n                const incomeData = {\r\n                    labels: incomeLabels,\r\n                    datasets: [{\r\n                        data: Object.values(aggregatedIncomes).map(item => item.total),\r\n                        backgroundColor: this.colors.slice(0, incomeLabels.length),\r\n                        borderWidth: 2,\r\n                        borderColor: '#ffffff'\r\n                    }]\r\n                };\r\n\r\n                const expenseData = {\r\n                    labels: expenseLabels,\r\n                    datasets: [{\r\n                        data: Object.values(aggregatedExpenses).map(item => item.total),\r\n                        backgroundColor: this.colors.slice(0, expenseLabels.length),\r\n                        borderWidth: 2,\r\n                        borderColor: '#ffffff'\r\n                    }]\r\n                };\r\n\r\n                if (incomeLabels.length > 0 && this.isCanvasAvailable(this.canvasIncomeElement)) {\r\n                    this.chartIncome = new chart_js__WEBPACK_IMPORTED_MODULE_0__.Chart(this.canvasIncome, this.getConfig(incomeData, 'Доходы'));\r\n                } else if (this.isCanvasAvailable(this.canvasIncomeElement)) {\r\n                    this.showEmptyChart(this.canvasIncome, 'Доходы');\r\n                }\r\n\r\n                if (expenseLabels.length > 0 && this.isCanvasAvailable(this.canvasExpensesElement)) {\r\n                    this.chartExpenses = new chart_js__WEBPACK_IMPORTED_MODULE_0__.Chart(this.canvasExpenses, this.getConfig(expenseData, 'Расходы'));\r\n                } else if (this.isCanvasAvailable(this.canvasExpensesElement)) {\r\n                    this.showEmptyChart(this.canvasExpenses, 'Расходы');\r\n                }\r\n            }\r\n\r\n            showEmptyChart(canvasContext, title) {\r\n                const emptyData = {\r\n                    labels: ['Нет данных'],\r\n                    datasets: [{\r\n                        data: [1],\r\n                        backgroundColor: ['#e9ecef']\r\n                    }]\r\n                };\r\n\r\n                const config = this.getConfig(emptyData, title);\r\n                config.options.plugins.tooltip = {\r\n                    callbacks: {\r\n                        label: function(context) {\r\n                            return `Нет данных по ${title.toLowerCase()}`;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                return new chart_js__WEBPACK_IMPORTED_MODULE_0__.Chart(canvasContext, config);\r\n            }\r\n\r\n            async getOperations(period = 'all', dateFrom = null, dateTo = null) {\r\n\r\n                const queryParams = new URLSearchParams();\r\n\r\n                if (period && period !== 'interval') {\r\n                    queryParams.append('period', period);\r\n                }\r\n\r\n                if (period === 'interval' && dateFrom && dateTo) {\r\n                    queryParams.append('dateFrom', dateFrom);\r\n                    queryParams.append('dateTo', dateTo);\r\n                }\r\n\r\n                const queryString = queryParams.toString();\r\n                const url = queryString ? this.url + '?' + queryString : this.url;\r\n\r\n                const result = await _utils_http_utils__WEBPACK_IMPORTED_MODULE_1__.HttpUtils.request(url);\r\n\r\n                if (result.error) {\r\n                    this.showEmptyCharts();\r\n                    return [];\r\n                }\r\n\r\n                if (result.response) {\r\n                    result.response.forEach(op => {\r\n                    });\r\n                }\r\n\r\n                this.createData(result.response);\r\n                this.updateBalance();\r\n\r\n                return result.response;\r\n            }\r\n\r\n            getConfig(data, title = '') {\r\n                return {\r\n                    type: 'pie',\r\n                    data: data,\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: true,\r\n                        plugins: {\r\n                            legend: {\r\n                                position: 'top',\r\n                                labels: {\r\n                                    padding: 15,\r\n                                    usePointStyle: true,\r\n                                    font: {\r\n                                        size: 12\r\n                                    }\r\n                                }\r\n                            },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: function(context) {\r\n                                        const label = context.label || '';\r\n                                        const value = context.parsed;\r\n                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);\r\n                                        const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\r\n                                        return `${label}: ${value}$ (${percentage}%)`;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                };\r\n            }\r\n\r\n            static async updateDiag(period = '', dateFrom = null, dateTo = null) {\r\n                const dashboardInstance = new Dashboard();\r\n                await dashboardInstance.getOperations(period, dateFrom, dateTo);\r\n            }\r\n\r\n            destroy() {\r\n                this.destroyCharts();\r\n            }\r\n        }\n\n//# sourceURL=webpack://frontend/./src/components/dashboard.js?\n}");

/***/ }),

/***/ "./src/utils/http-utils.js":
/*!*********************************!*\
  !*** ./src/utils/http-utils.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpUtils: () => (/* binding */ HttpUtils)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/utils/config.js\");\n/* harmony import */ var _auth_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth-utils */ \"./src/utils/auth-utils.js\");\n\r\n\r\n\r\nclass HttpUtils {\r\n    static async request(url, method = 'GET', useAuth = true, body = null) {\r\n        const result = {\r\n            error: false,\r\n            response: null\r\n        }\r\n\r\n        const accessToken = _auth_utils__WEBPACK_IMPORTED_MODULE_1__.AuthUtils.getAuthInfo(_auth_utils__WEBPACK_IMPORTED_MODULE_1__.AuthUtils.accessTokenKey);\r\n        const refreshToken = _auth_utils__WEBPACK_IMPORTED_MODULE_1__.AuthUtils.getAuthInfo(_auth_utils__WEBPACK_IMPORTED_MODULE_1__.AuthUtils.refreshTokenKey);\r\n\r\n        const params = {\r\n            method: method,\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Accept': 'application/json',\r\n            },\r\n        };\r\n\r\n        if (useAuth) {\r\n            if (accessToken) {\r\n                params.headers['x-auth-token'] = accessToken;\r\n            } else {\r\n                console.log('No access token - request may fail');\r\n            }\r\n        }\r\n\r\n        if (body) {\r\n            params.body = JSON.stringify(body);\r\n        }\r\n\r\n        let response = null;\r\n        try {\r\n            response = await fetch(_config__WEBPACK_IMPORTED_MODULE_0__.config.api + url, params);\r\n\r\n            result.response = await response.json();\r\n\r\n        } catch (e) {\r\n            result.error = true;\r\n            return result;\r\n        }\r\n\r\n        if (response.status < 200 || response.status >= 300) {\r\n            result.error = true;\r\n\r\n            if (useAuth && response.status === 401) {\r\n                if (!accessToken) {\r\n                    result.redirect = '/login';\r\n                } else {\r\n                    const updateTokenResult = await _auth_utils__WEBPACK_IMPORTED_MODULE_1__.AuthUtils.updateRefreshToken();\r\n                    if (updateTokenResult) {\r\n                        return this.request(url, method, useAuth, body);\r\n                    } else {\r\n                        result.redirect = '/login';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\n\n//# sourceURL=webpack://frontend/./src/utils/http-utils.js?\n}");

/***/ })

}]);