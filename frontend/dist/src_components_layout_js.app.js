"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["src_components_layout_js"],{

/***/ "./src/components/layout.js":
/*!**********************************!*\
  !*** ./src/components/layout.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Layout: () => (/* binding */ Layout)\n/* harmony export */ });\n/* harmony import */ var _utils_auth_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/auth-utils */ \"./src/utils/auth-utils.js\");\n\r\n\r\nclass Layout {\r\n    constructor() {\r\n        this.isUserMenuOpen = false;\r\n        this.init();\r\n        this.updateUserInfo();\r\n    }\r\n\r\n    init() {\r\n        this.setupActiveState();\r\n        this.setupDropdownBehavior();\r\n        this.updateUserInfo();\r\n        this.setupUserDropdown();\r\n        this.setupHoverEffects();\r\n    }\r\n\r\n    updateUserInfo() {\r\n        const userInfo = _utils_auth_utils__WEBPACK_IMPORTED_MODULE_0__.AuthUtils.getAuthInfo(_utils_auth_utils__WEBPACK_IMPORTED_MODULE_0__.AuthUtils.userInfoTokenKey);\r\n        const userNameElement = document.querySelector('.user-name');\r\n\r\n        if (userInfo && userNameElement) {\r\n            try {\r\n                const userData = JSON.parse(userInfo);\r\n                if (userData.name && userData.lastName) {\r\n                    userNameElement.textContent = `${userData.name} ${userData.lastName}`;\r\n                }\r\n            } catch (e) {\r\n                console.error('Error parsing user info:', e);\r\n            }\r\n        }\r\n\r\n        this.updateBalance();\r\n    }\r\n\r\n    async updateBalance() {\r\n        try {\r\n            const result = await fetch('http://localhost:3000/api/balance', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'x-auth-token': _utils_auth_utils__WEBPACK_IMPORTED_MODULE_0__.AuthUtils.getAuthInfo(_utils_auth_utils__WEBPACK_IMPORTED_MODULE_0__.AuthUtils.accessTokenKey)\r\n                }\r\n            });\r\n\r\n            if (result.ok) {\r\n                const data = await result.json();\r\n                const balanceElement = document.getElementById('balance-amount');\r\n                if (balanceElement && data.balance !== undefined) {\r\n                    balanceElement.textContent = data.balance + '$';\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Balance update error:', error);\r\n        }\r\n    }\r\n\r\n    setupHoverEffects() {\r\n        const navItems = document.querySelectorAll('.nav-item:not(.active)');\r\n\r\n        navItems.forEach(navItem => {\r\n            navItem.addEventListener('mouseenter', () => {\r\n                this.updateNavItemIcons(navItem, true);\r\n            });\r\n\r\n            navItem.addEventListener('mouseleave', () => {\r\n                this.updateNavItemIcons(navItem, false);\r\n            });\r\n        });\r\n    }\r\n\r\n    setupUserDropdown() {\r\n        const userDropdown = document.getElementById('userDropdown');\r\n        const userDropdownMenu = document.getElementById('userDropdownMenu');\r\n\r\n        if (userDropdown && userDropdownMenu) {\r\n            userDropdown.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.toggleUserMenu();\r\n            });\r\n\r\n            document.addEventListener('click', (e) => {\r\n                if (!userDropdown.contains(e.target) && !userDropdownMenu.contains(e.target)) {\r\n                    this.closeUserMenu();\r\n                }\r\n            });\r\n\r\n            userDropdownMenu.addEventListener('click', (e) => {\r\n                e.stopPropagation();\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleUserMenu() {\r\n        const userDropdownMenu = document.getElementById('userDropdownMenu');\r\n        if (userDropdownMenu) {\r\n            if (this.isUserMenuOpen) {\r\n                this.closeUserMenu();\r\n            } else {\r\n                this.openUserMenu();\r\n            }\r\n        }\r\n    }\r\n\r\n    openUserMenu() {\r\n        const userDropdownMenu = document.getElementById('userDropdownMenu');\r\n        if (userDropdownMenu) {\r\n            userDropdownMenu.style.display = 'block';\r\n            this.isUserMenuOpen = true;\r\n        }\r\n    }\r\n\r\n    closeUserMenu() {\r\n        const userDropdownMenu = document.getElementById('userDropdownMenu');\r\n        if (userDropdownMenu) {\r\n            userDropdownMenu.style.display = 'none';\r\n            this.isUserMenuOpen = false;\r\n        }\r\n    }\r\n\r\n    setupActiveState() {\r\n        this.updateActiveNavItem(window.location.pathname);\r\n\r\n        document.addEventListener('routeChanged', (e) => {\r\n            this.updateActiveNavItem(e.detail.route);\r\n        });\r\n    }\r\n\r\n    updateActiveNavItem(activeRoute) {\r\n        document.querySelectorAll('.nav-item').forEach(item => {\r\n            item.classList.remove('active');\r\n            this.updateNavItemIcons(item, false);\r\n        });\r\n\r\n        let activeLink = this.findActiveLink(activeRoute);\r\n\r\n        if (activeLink) {\r\n            activeLink.classList.add('active');\r\n            this.updateNavItemIcons(activeLink, true);\r\n\r\n            activeLink.removeEventListener('mouseenter', () => {});\r\n            activeLink.removeEventListener('mouseleave', () => {});\r\n        }\r\n\r\n        this.openCategoriesForRelatedPages(activeRoute);\r\n\r\n        this.setupHoverEffects();\r\n    }\r\n\r\n    findActiveLink(activeRoute) {\r\n        let activeLink = document.querySelector(`a[href=\"${activeRoute}\"]`);\r\n\r\n        if (activeLink) return activeLink;\r\n\r\n        const routeGroups = {\r\n            '/profit': ['/create-profit', '/edit-profit'],\r\n            '/costs': ['/create-costs', '/edit-costs']\r\n        };\r\n\r\n        for (const [mainRoute, relatedRoutes] of Object.entries(routeGroups)) {\r\n            if (relatedRoutes.includes(activeRoute)) {\r\n                activeLink = document.querySelector(`a[href=\"${mainRoute}\"]`);\r\n                if (activeLink) return activeLink;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    openCategoriesForRelatedPages(activeRoute) {\r\n        const dropdownCheckbox = document.getElementById('categories-toggle');\r\n        if (!dropdownCheckbox) return;\r\n\r\n        const categoryRelatedPages = [\r\n            '/profit', '/costs',\r\n            '/create-profit', '/create-costs',\r\n            '/edit-profit', '/edit-costs'\r\n        ];\r\n\r\n        if (categoryRelatedPages.includes(activeRoute)) {\r\n            dropdownCheckbox.checked = true;\r\n        }\r\n    }\r\n\r\n    updateNavItemIcons(navItem, showActive) {\r\n        const navItemIcon = navItem.querySelector('.nav-item-icon');\r\n        if (navItemIcon) {\r\n            const normalIcon = navItemIcon.querySelector('.normal-icon');\r\n            const activeIcon = navItemIcon.querySelector('.active-icon');\r\n\r\n            if (normalIcon && activeIcon) {\r\n                if (showActive) {\r\n                    normalIcon.classList.remove('d-block');\r\n                    normalIcon.classList.add('d-none');\r\n                    activeIcon.classList.remove('d-none');\r\n                    activeIcon.classList.add('d-block');\r\n                } else {\r\n                    normalIcon.classList.remove('d-none');\r\n                    normalIcon.classList.add('d-block');\r\n                    activeIcon.classList.remove('d-block');\r\n                    activeIcon.classList.add('d-none');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDropdownBehavior() {\r\n        document.addEventListener('click', (e) => {\r\n            const dropdown = document.querySelector('.dropdown');\r\n            const checkbox = document.getElementById('categories-toggle');\r\n\r\n            if (!dropdown || !checkbox) return;\r\n\r\n            const keepOpenPages = [\r\n                '/profit', '/costs',\r\n                '/create-profit', '/create-costs',\r\n                '/edit-profit', '/edit-costs'\r\n            ];\r\n\r\n            const shouldKeepOpen = keepOpenPages.includes(window.location.pathname);\r\n\r\n            if (!dropdown.contains(e.target) && !shouldKeepOpen) {\r\n                checkbox.checked = false;\r\n            }\r\n        });\r\n\r\n        const dropdownList = document.querySelector('.dropdown-list');\r\n        if (dropdownList) {\r\n            dropdownList.addEventListener('click', (e) => {\r\n                e.stopPropagation();\r\n            });\r\n        }\r\n    }\r\n\r\n    static async setBalance() {\r\n        const layout = new Layout();\r\n        await layout.updateBalance();\r\n    }\r\n}\n\n//# sourceURL=webpack://frontend/./src/components/layout.js?\n}");

/***/ }),

/***/ "./src/utils/auth-utils.js":
/*!*********************************!*\
  !*** ./src/utils/auth-utils.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthUtils: () => (/* binding */ AuthUtils)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/utils/config.js\");\n\r\n\r\nclass AuthUtils {\r\n    static accessTokenKey = 'accessToken';\r\n    static refreshTokenKey = 'refreshToken';\r\n    static userInfoTokenKey = 'userInfoToken';\r\n\r\n    static setAuthInfo(accessToken, refreshToken, userInfo = null) {\r\n        localStorage.setItem(this.accessTokenKey, accessToken);\r\n        localStorage.setItem(this.refreshTokenKey, refreshToken);\r\n        if (userInfo) {\r\n            localStorage.setItem(this.userInfoTokenKey, JSON.stringify(userInfo));\r\n        }\r\n    }\r\n\r\n    static removeAuthInfo() {\r\n        localStorage.removeItem(this.accessTokenKey);\r\n        localStorage.removeItem(this.refreshTokenKey);\r\n        localStorage.removeItem(this.userInfoTokenKey);\r\n    }\r\n\r\n    static getAuthInfo(key = null) {\r\n        if (key && [this.accessTokenKey, this.refreshTokenKey, this.userInfoTokenKey].includes(key)) {\r\n            return localStorage.getItem(key);\r\n        } else {\r\n            return {\r\n                [this.accessTokenKey]: localStorage.getItem(this.accessTokenKey),\r\n                [this.refreshTokenKey]: localStorage.getItem(this.refreshTokenKey),\r\n                [this.userInfoTokenKey]: localStorage.getItem(this.userInfoTokenKey)\r\n            }\r\n        }\r\n    }\r\n\r\n    static async updateRefreshToken() {\r\n        let result = false;\r\n        const refreshToken = this.getAuthInfo(this.refreshTokenKey);\r\n\r\n        if (refreshToken) {\r\n            try {\r\n                const response = await fetch(_config__WEBPACK_IMPORTED_MODULE_0__.config.api + '/refresh', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Accept': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({refreshToken: refreshToken})\r\n                });\r\n\r\n                if (response && response.status === 200) {\r\n                    const resultData = await response.json();\r\n                    if (resultData && !resultData.error) {\r\n                        this.setAuthInfo(resultData.tokens.accessToken, resultData.tokens.refreshToken);\r\n                        result = true;\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Token refresh error:', error);\r\n            }\r\n        }\r\n\r\n        if (!result) {\r\n            this.removeAuthInfo();\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\n\n//# sourceURL=webpack://frontend/./src/utils/auth-utils.js?\n}");

/***/ }),

/***/ "./src/utils/config.js":
/*!*****************************!*\
  !*** ./src/utils/config.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\nconst config = {\r\n    api: 'http://localhost:3000/api'\r\n}\n\n//# sourceURL=webpack://frontend/./src/utils/config.js?\n}");

/***/ })

}]);